#!/usr/bin/python

from Aion.utils.data import *
from Aion.utils.graphics import *

from androguard.session import Session
import numpy

import os, json


def extractAndroguardFeatures(apkPath):
    """Extracts static numerical features from APK using Androguard"""
    try:
        features = []
        analysisSession = Session()
        if not os.path.exists(apkPath):
            prettyPrint("Could not find the APK file \"%s\"" % apkPath, "warning")
            return []
        # 1. Analyze APK and retrieve its components
        analysisSession.add(apkPath, open(apkPath).read())
        apk = analysisSession.analyzed_apk.values()[0]
        dex = analysisSession.analyzed_dex.values()[0][0]
        vm = analysisSession.analyzed_dex.values()[0][1]
        # 2. Add features to the features vector
        # 2.a. The APK-related features
        minSDKVersion = 0.0 if not apk.get_min_sdk_version() else float(apk.get_min_sdk_version())
        maxSDKVersion = 0.0 if not apk.get_max_sdk_version() else float(apk.get_max_sdk_version())
        features.append(minSDKVersion)
        features.append(maxSDKVersion)
        features.append(float(len(apk.get_activities()))) # No. of activities
        features.append(float(len(apk.get_services()))) # No. of services
        features.append(float(len(apk.get_receivers()))) # No. of broadcast receivers
        features.append(float(len(apk.get_providers()))) # No. of providers
        aospPermissions = float(len(apk.get_requested_aosp_permissions())) # AOSP permissions
        thirdPartyPermissions = float(len(apk.get_requested_third_party_permissions())) # Third-party permissions
        totalPermissions = aospPermissions + thirdPartyPermissions
        dangerousPermissions = 0.0
        for p in apk.get_details_permissions():
            if apk.get_details_permissions()[p][0] == "dangerous":
                dangerousPermissions += 1.0 
        features.append(totalPermissions) # No. of permissions
        features.append(aospPermissions/totalPermissions) # AOSP permissions : Total permissions
        features.append(thirdPartyPermissions/totalPermissions) # Third-party permissions : Total permissions
        features.append(dangerousPermissions/totalPermissions) # Dangerous permissions : Total permissions
        # 2.b. The DEX-related features
        features.append(float(len(dex.get_classes()))) # Total number of classes
        features.append(float(len(dex.get_strings()))) # Total number of strings

    except Exception as e:
        prettyPrintError(e)
    
    return features     


def extractIntrospyFeatures(apkJSONPath):
    """Extracts dynamic features from a JSON-based trace generated by Introspy"""
    try:
        features = []
        if not os.path.exists(apkJSONPath):
            prettyPrint("Could not find the JSON file \"%s\"" % apkJSONPath, "warning")
        else:
            apkJSON = json.loads(open(apkJSONPath).read())
            cryptoCalls, sslCalls, hashCalls = 0.0, 0.0, 0.0 # Crypto group
            fsCalls, prefCalls, uriCalls = 0.0, 0.0, 0.0 # Storage group
            ipcCalls = 0.0 # Ipc group
            webviewCalls = 0.0  # Misc group
            for call in apkJSON["calls"]:
                group, subgroup = call["group"], call["subgroup"]
                if group == "Crypto":
                    cryptoCalls = cryptoCalls + 1 if subgroup == "General crypto" else cryptoCalls
                    hashCalls = hashCalls + 1 if subgroup == "Hash" else hashCalls
                    sslCalls = sslCalls + 1 if subgroup == "Ssl" else sslCalls
                elif group == "Storage":
                    fsCalls = storageCalls + 1 if call["group"] == "Fs" else fsCalls
                    prefCalls = prefCalls + 1 if call["group"] == "Pref" else prefCalls
                    uriCalls = uriCalls + 1 if call["group"] == "Uri" else uriCalls
                elif group == "Ipc":
                    ipcCalls = ipcCalls + 1 if call["group"] == "Ipc" else ipcCalls
                elif group == "Misc":
                    webviewCalls = webviewCalls + 1 if call["group"] == "Webview" else webviewCalls

        features.append(cryptoCalls)
        features.append(sslCalls)
        features.append(hashCalls)
        features.append(fsCalls)
        features.append(prefCalls)
        features.append(uriCalls)
        features.append(ipcCalls)
        features.append(webviewCalls)

    except Exception as e:
        prettyPrintError(e)

    return features


